import numpy as np
import matplotlib.pyplot as plt
import time
M=[2048,4096,8192]
# M=[2**5,2**7,2**8,2**10,2**11,2**12]

# 定义0 F2 F3 F4......FM
#    0 0  F3 F4......FM
#
#
#    0 0  0   0 ......0
total_time=np.zeros(3)
for t in range(0, 3):
    vec_F=np.zeros(M[t])
    for i in range(1, M[t]):
        vec_F[i] = (i + 1) / i

    #定义初始n向量（00000000.....1）
    n0=np.zeros(M[t])
    n0[M[t]-1]=1
    #定义1/k向量
    vec_i=np.zeros(M[t])
    for i in range(0, M[t]):
        vec_i[i]=1/(i+1)
        i+=1
    # print(vec_i)
    #计算向量与向量之间的元素之间的乘积
    def vec_vec(A,B):
        i=0
        C=np.zeros(M[t])
        while(i<M[t]):
            C[i]=A[i]*B[i]
            i+=1
        return (C)
    #计算矩阵和向量的某种特殊乘积
    def matvec(A,B):
        C=np.zeros(M[t])
        i=M[t]-1
        while(i>0):
            C[i-1]=C[i]+A[i]*B[i]
            i=i-1
        return (C)


    def solve_fragmentation(vec_F,n,vec_i):
        MATVEC=matvec(vec_F,n)
        # print(MATVEC)
        n_k=-vec_vec(vec_F,n)+ vec_vec(MATVEC,vec_i)
        # print( vec_vec(MATVEC,vec_i))
        # print(-vec_vec(vec_F,n))
        return n_k

    timestep=0.001

    n_k=[n0]
    time_points=[0]

    def make_solution(time_step):
      n_k_now=n0
      time=0
      while time<1:
        n_k_now=n_k_now+solve_fragmentation(vec_F,n_k_now,vec_i)*time_step
        time+=time_step
        time_points.append(time)

    time_start=time.time()
    make_solution(timestep)
    # print(n_k)
    time_end=time.time()
    total_time[t]=time_end-time_start
    print((t+1)/3)


plt.plot(M, total_time, label='time_series for fregmentation')
plt.xlabel('N')
plt.ylabel('time')
plt.legend()
plt.show()

print(total_time)
